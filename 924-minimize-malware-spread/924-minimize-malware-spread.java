class Solution {
    int n;
    int[] colors;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        if(graph.length == 0 || graph == null)return 0;
        n = graph.length;
        colors = new int[n];
        Arrays.fill(colors, -1);
        int cl = 0;
        for(int i =0; i<n; i++){
            if(colors[i] == -1){
                dfs(i, graph, cl);
                cl++;
            }
            
        }
        int[] groups = new int[cl];
        for(int i = 0; i<n; i++){
            groups[colors[i]]++;
        }
        int[] infected = new int[cl];
        for(int i =0; i<initial.length; i++){
            int color = colors[initial[i]];
            infected[color]++;
        }
        int result = Integer.MAX_VALUE;
        for(int i =0; i<initial.length; i++){
            int color = colors[initial[i]];
            int total = infected[color];
            if(total == 1){
                if(result == Integer.MAX_VALUE)
                    result = initial[i];
                else if(groups[color]>groups[colors[result]]){
                    result = initial[i];
                }
                else if(groups[color]==groups[colors[result]] && initial[i] <result)
                    result = initial[i];
            }
        }
        if(result == Integer.MAX_VALUE){
            for(int i =0; i<initial.length; i++){
                result = Math.min(result, initial[i]);
            }
        }
        
        return result;
        
    }
    private void dfs(int i, int[][] graph, int cl){
        
        if(colors[i] != -1)
            return;
        colors[i] = cl;
        for(int j=0; j<n; j++){
            if(graph[i][j] == 1){
                dfs(j, graph, cl);
            }
        }
        
    }
}